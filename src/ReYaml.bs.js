// Generated by BUCKLESCRIPT VERSION 4.0.8, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Yaml = require("yaml");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

var Yaml$1 = /* module */[];

function parse(str) {
  var json = Yaml.parse(str);
  var p = function (json) {
    var match = typeof json;
    switch (match) {
      case "boolean" : 
          return /* Bool */Block.__(0, [json]);
      case "number" : 
          return /* Float */Block.__(1, [json]);
      case "string" : 
          return /* String */Block.__(2, [json]);
      default:
        if (Array.isArray(json)) {
          var parsedArr = $$Array.to_list($$Array.map(p, json));
          return /* Array */Block.__(3, [parsedArr]);
        } else if (match === "object") {
          if (json == null) {
            return /* Null */0;
          } else {
            var entries = Js_dict.entries(json);
            var list = $$Array.to_list($$Array.map((function (param) {
                        return /* tuple */[
                                param[0],
                                p(param[1])
                              ];
                      }), entries));
            return /* Object */Block.__(4, [list]);
          }
        } else {
          return Pervasives.failwith("This should never happen");
        }
    }
  };
  return p(json);
}

function stringify(yaml) {
  var s = function (yaml) {
    if (typeof yaml === "number") {
      return null;
    } else {
      switch (yaml.tag | 0) {
        case 3 : 
            return $$Array.of_list(List.map(s, yaml[0]));
        case 4 : 
            return Js_dict.fromList(List.map((function (param) {
                              return /* tuple */[
                                      param[0],
                                      s(param[1])
                                    ];
                            }), yaml[0]));
        default:
          return yaml[0];
      }
    }
  };
  return Yaml.stringify(s(yaml));
}

exports.Yaml = Yaml$1;
exports.parse = parse;
exports.stringify = stringify;
/* yaml Not a pure module */
